Using Demo Device Classes

BMD200EvalManager class
This class provides methods for finding and connecting to demo devices.
Once a BMD200EvalDemoDevice object has been obtained, this class is only needed for reconnection, disconnection,
 and obtaining a reference to the connected object if it becomes lost.
There is a companion observer class, BMD200EvalManagerObserver,
 which provides callback methods for connection and disconnection of BMD200EvalDemoDevice objects.
There can only be one observer at a time and in general, each fragment will likely want to be the observer of this class while it is being displayed.

1. Finding and connecting to Demo Devices

To find and connect to demo devices, simply get the instance of the BMD200EvalManager class, assign your class as the observer,
 and then call the searchForDemoDevices() method.  Upon discovery of a demo device that is within close enough range (-60 RSSI or higher),
 a connection to the device will automatically be attempted.
If successful, the manager class will create and populate a BMD200EvalDemoDevice object.
Once all is ready, the observer method didConnectDevice will be invoked with the BMD200EvalDemoDevice object being passed along.

To check if a demo device is currently connected, call the isConnected method in the BMD200EvalManager.

2. Getting the currently connected device
If a new class object needs to get access to the connected demo device, call the getDemoDevice() method of the BMD200EvalManager class.

3. Disconnecting from a DemoDevice
To disconnect, simply call the disconnectDevice method of the BMD200EvalManager class.  If no device is connected, this method will do nothing.


BMD200EvalDemoDevice class

The BMD200EvalDemoDevice provides an interface to all of the functionality of the demo firmware.
In addition, this class provides a method to determine the type of demo device to which it is connected.
There are 3 types of possible device connections, but only one, MainEvalDemo, is the device type running the firmware necessary for this app.
Later on, this documentation will discuss how to handle the other types.

The BMD200EvalDemoDevice has an observer companion class, BMD200EvalDemoDeviceObserver, and the device object has the ability to communicate with one observer at a time.
When certain events happen on the demo device, the appropriate observer methods will be called.
Upon receiving a demo device object, the fragment showing the object’s information should call the setObserver method to ensure demo device events are received.
Note that this only needs to be done if the demo device type is MainEvalDemo.  Other device types will not invoke the observer methods.

The demo device has four main operational elements: LED, Button, Ambient Light, and Accelerometer.  Each element is described below.

LED: The LED element controls the on board RGB (Red, Green, Blue) LED.  The LED data is represented by the RbgColor class.
This class contains red, green, and blue variables.  To set the current LED color, call setLedColor.  To get the current color, call getLedColor.
There is an observer method for this data changing, but it is unlikely to ever be called since nothing changes the LED color asynchronously at this time.

Button: The button element provides the status of the buttons when either button’s state changes.  Only changes are represented.
If a button is being held down, there will not be any further indication it has changed state until the button is released.
When a button event occurs, the observer method didUpdateButtonData will be called.
The ButtonStatus object contains two state variables, User1Button, and User2Button (these match the button labels on the Evaluation board).
If the value is set to true, the button is pressed.  If it is false, the button is not pressed.

Ambient Light: The ambient light element provides a read back of the ambient light level.  This functionality shows off the ADC of the nrf51 IC.
To receive ambient light level readings, call the startAmbientLightSensing on the demo device object.
Once started, ambient light level readings will be sent by the demo device until it is either stopped by stopAmbientLightSensing, or a disconnection occurs.

The ambient light data is supplied via the AmbientLight helper class.
In addition to the raw ambient light level (which is 0 to 1800 mV), a scaled alpha value is provided to fade the ambient light sensing box in and out.
In the iOS app, this value is simply supplied as the alpha value for a white box.  As the light intensity increases, the box becomes more opaque.
As the light intensity decreases, the box becomes more transparent.  The value of the current reading should also be displayed in millivolts.
This reading is provided by the getLevel method of the AmbientLight class.  Ambient light readings are supplied via the didUpdateAmbientLightData observer method.

Accelerometer:  The accelerometer element provides X, Y, and Z axis data from the on board accelerometer.
Once enabled, accelerometer data packets are transmitted to the connected app at 12.5 Hz (or ~every 80 ms).
The X, Y, and Z data points should be graphed.  On iOS, the following colors are assigned to the graph lines:
X - Red
Y - Blue
Z - Green

Accelerometer data events are reported via the didUpdateAccelData observer method and the helper class AccelData.
This class has methods for retrieving the value of each axis.  To start receiving accelerometer data, call the startAccelerometer method of the demo device.
Once started, accelerometer data will continue to be sent until with stopAccelerometer method is called or a disconnection occurs.

In addition to all of the above, the demo device provides access to a BMD200EvalBootloaderInfo object that provides the
 information necessary to invoke the bootloader through the RigFirmwareUpdateManager.
The notable necessary pieces are the bootloader service, bootloader characteristic, and bootloader command.
To start the bootloader regardless of the device type, simply call the getBootloaderInfo on the demo device and use the information provided to invoke
 the updateFirmware method of RigFirmwareUpdateManager.

Other types of Demo Devices
The BMD200EvalManager class will also connect to two other types of demo devices.
This is because evaluation kits are shipped with firmware that does not work with the demo app.
The firmware shipped on evaluation kits is called BMDware.  In addition, there is also a Blinky example firmware that can be programmed from the demo app.
This firmware is included to provide the ability to demonstrate the Rigado firmware update process.
The following sections detail how the app should handle both types of demo devices.

If the connected device type is BMDware:
The app, upon connection, should automatically navigate to the Update tab (unless it is already on the update tab).
It should then display a message to the user with 'Yes' and 'No' as the options.  The message text should read:
'BMDWare is installed to this evaluation board.  If you would like to use its features, download the Rigado Toolbox app from the Google Play store.
Would you like to program the Evaluation demo firmware?'

If a title is available, then the title should be 'BMDware Installed'.
If the user selects 'Yes', then the app should automatically start programming the main demo firmware.
If the user selects no, then the app should do nothing.

If the connected device type is BlinkyDemo:
The app, upon connection, should automatically navigate to the Update tab (unless it is already on the update tab).
It should then display a message to the user with 'Yes' and 'No' as the options.  The message text should read:
'The Blinky demo is currently programmed.  Would you like to revert to the main demo firmware?'

If a title is available for the message, then the title should be 'Blinky Connected'.
If the user presses 'Yes', then the app should automatically start programming the main demo firmware.
If the user presses 'No', then the app should do nothing.
